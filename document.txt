設問1
監視ログファイルを読み込み、故障状態のサーバアドレスとそのサーバの故障期間を出力するプログラムを作成せよ。
出力フォーマットは任意でよい。
なお、pingがタイムアウトした場合を故障とみなし、最初にタイムアウトしたときから、次にpingの応答が返るまでを故障期間とする。

説明
    設問1を解くプログラムは "question1.py" に書かれている。

プログラムの実行方法
    1.ターミナルでfixpointフォルダに移動
    2.python "question1.py" で実行

関数の内容
    data()
        監視ログファイルを読み込む関数

            監視ログファイル"monitoringLog.csv"を開く
            確認結果は以下に示すカンマ区切りの形式で1行ずつ監視ログファイルに追記される。
            -------------------------------------------------
            ＜確認日時＞,＜サーバアドレス＞,＜応答結果＞
            -------------------------------------------------
            監視ログファイルのデータをリスト"log_data"に格納
            確認日時を「年、月、日、時、分、秒」に分割

    failure()
        タイムアウトしたサーバーの情報とサーバーの状態を保存する関数

            "failure","restoration"の2つの状態を用意
            "failure"       : タイムアウトしたサーバーの状態
            "restoration"   : タイムアウトした後、pingの応答が返ってきたサーバーの状態


            タイムアウトしたサーバーの「確認日時,サーバアドレス,応答結果」をリスト"server_timeout"に格納、状態を"failure"にする

            タイムアウトした後、pingの応答が返ってきたサーバーがある場合、そのサーバーの
            「最初にタイムアウトした日時,pingの応答が返ってきた日時,サーバアドレス,pingの応答が返ってきた時の応答結果」を"server_timeout_log"に格納、
            状態を"restoration"にする

    failure_period()
        serverの故障期間を出力する関数

            サーバーの状態が"failure"の場合、最初にタイムアウトしたときから、現在時刻までを故障期間とする
            サーバーの状態が"restoration"の場合、最初にタイムアウトしたときから、次にpingの応答が返るまでを故障期間とする。

    period_calculation(server)
        serverの故障期間を計算し、故障期間を出力する関数


            閏年も考慮している。

    month_day(year,month)
        year 年 month 月 の日数を戻り値として返す関数（閏年を考慮している）


設問2
ネットワークの状態によっては、一時的にpingがタイムアウトしても、一定期間するとpingの応答が復活することがあり、
そのような場合はサーバの故障とみなさないようにしたい。
N回以上連続してタイムアウトした場合にのみ故障とみなすように、設問1のプログラムを拡張せよ。
Nはプログラムのパラメータとして与えられるようにすること。

説明
    設問2を解くプログラムは "question2.py" に書かれている。

プログラムの実行方法
    1.ターミナルでfixpointフォルダに移動
    2.python "question2.py" で実行

関数の内容

    設問1との差分を記述する

    failure()
        設問1のfailure()関数を、N回以上連続してタイムアウトした場合にのみ故障とみなすように変更した。

        "timeout","failure","restoration"の3つの状態を用意

        "timeout"       : N回未満連続してタイムアウトしているサーバーの状態
        "failure"       : N回以上連続してタイムアウトしているサーバーの状態
        "restoration"   : N回以上連続してタイムアウトした後、pingの応答が返ってきたサーバーの状態

        タイムアウトしたサーバーの「確認日時,サーバアドレス,応答結果」をリスト"server_timeout"に格納、状態を"timeout"にする

        N回以上連続してタイムアウトしているサーバーの状態を"failure"にする

        N回以上連続してタイムアウトした後、pingの応答が返ってきたサーバーがある場合、そのサーバーの
        「最初にタイムアウトした日時,pingの応答が返ってきた日時,サーバアドレス,pingの応答が返ってきた時の応答結果」を"server_timeout_log"に格納、
        状態を"restoration"にする。

        "timeout" の状態でpingの応答が返ってきた場合、故障とみなさない

設問3
サーバが返すpingの応答時間が長くなる場合、サーバが過負荷状態になっていると考えられる。
そこで、直近m回の平均応答時間がtミリ秒を超えた場合は、サーバが過負荷状態になっているとみなそう。
設問2のプログラムを拡張して、各サーバの過負荷状態となっている期間を出力できるようにせよ。mとtはプログラムのパラメータとして与えられるようにすること。

説明
    設問3を解くプログラムは "question3.py" に書かれている。

プログラムの実行方法
    1.ターミナルでfixpointフォルダに移動
    2.python "question3.py" で実行

関数の内容
    
    設問2との差分を記述する

    overload()
        タイムアウトしたサーバーの情報とサーバーの状態を保存する関数

        "overload","restoration2"の2つの状態を用意

        "overload"       : 直近m回の平均応答時間がtミリ秒を超えたサーバーの状態
        "restoration2"   : "overload"になった後、直近m回の平均応答時間がtミリ秒以下になったサーバーの状態

    overlord_append(server,server_append) 
        過負荷状態になったサーバーの「直近m回の平均応答時間がtミリ秒を超えた日時,サーバアドレス,応答結果」をリスト"server_overload"に格納し、状態を"overload" にする関数

    overlord_cancel(server,server_append)
        サーバーが過負荷状態から通常状態になった場合、
        「最初に直近m回の平均応答時間がtミリ秒を超えた日時,直近m回の平均応答時間がtミリ秒以下になった日時,サーバアドレス,直近m回の平均応答時間がtミリ秒以下になった時の応答結果」
        をリスト"server_overload_log"に格納し、状態を"restoration2" にする関数

    average_response_time(server):
        直近m回の平均応答時間を計算し、戻り値として返す関数

    
    failure_period()
        serverの故障期間と過負荷期間を出力する関数

        設問1のfailure_period()からの追加要素を記述する
        
            サーバーの状態が"overload"の場合、最初に直近m回の平均応答時間がtミリ秒を超えたときから、現在時刻までを過負荷期間とする
            サーバーの状態が"restoration2"の場合、最初に直近m回の平均応答時間がtミリ秒を超えたときから、直近m回の平均応答時間がtミリ秒以下になったときまでを過負荷期間とする
    period_calculation(server)
        serverの故障期間や過負荷期間を計算し、計算結果を出力する関数
            閏年も考慮している。

設問4
ネットワーク経路にあるスイッチに障害が発生した場合、そのスイッチの配下にあるサーバの応答がすべてタイムアウトすると想定される。
そこで、あるサブネット内のサーバが全て故障（ping応答がすべてN回以上連続でタイムアウト）している場合は、
そのサブネット（のスイッチ）の故障とみなそう。
設問2または3のプログラムを拡張して、各サブネット毎にネットワークの故障期間を出力できるようにせよ。

説明
    設問3を解くプログラムは "question4.py" に書かれている。

プログラムの実行方法
    1.ターミナルでfixpointフォルダに移動
    2.python "question4.py" で実行

関数の内容
    
    設問3との差分を記述する

    network_failure(server)
        ネットワークの情報とネットワークの状態を保存する関数

        "timeout","failure3","restoration3"の3つの状態を用意

        "timeout"       : N回未満連続してタイムアウトしているサブネット内のサーバーの状態
        "failure3"       : N回以上連続してタイムアウトしているサブネット内のサーバーの状態
        "restoration3"   : N回以上連続してタイムアウトした後、pingの応答が返ってきたサブネット内のサーバーの状態

        タイムアウトしたサブネット内のサーバーの「確認日時,ネットワークプレフィックス長,応答結果」をリスト"server_network_failure"に格納、状態を"timeout"にする

        N回以上連続してサブネット内のサーバーがタイムアウトしている場合の状態を"failure3"にする

        N回以上連続してタイムアウトした後、pingの応答が返ってきたサーバーがある場合、そのサーバーの
        「最初にタイムアウトした日時,pingの応答が返ってきた日時,ネットワークプレフィックス長,pingの応答が返ってきた時の応答結果」を"server_network_failure_log"に格納、
        状態を"restoration3"にする。

        "timeout" の状態でpingの応答が返ってきた場合、故障とみなさない

    failure_period()
        serverの故障期間と過負荷期間,ネットワークの故障期間を出力する関数

        設問3のfailure_period()からの追加要素を記述する
        
            ネットワークの状態が"failure3"の場合、最初にタイムアウトしたときから、現在時刻までを故障期間とする
            ネットワークの状態が"restoration3"の場合、最初にタイムアウトしたときから、次にpingの応答が返るまでを故障期間とする。
    period_calculation(server)
        serverの故障期間や過負荷期間、ネットワークの故障期間を計算し、計算結果を出力する関数
            閏年も考慮している。




        















